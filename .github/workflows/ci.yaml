name: CI

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase db start
      - run: supabase db lint
      - run: supabase test db

      - name: Verify generated types are checked in
        run: |
          supabase gen types typescript --local > types.gen.ts
          if ! git diff --ignore-space-at-eol --exit-code --quiet types.gen.ts; then
            echo "Detected uncommitted changes after build. See status below:"
            git diff
            exit 1
          fi

  dryrun:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Install jq (for PR base_ref parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Choose Supabase project id
        env:
          PRODUCTION_PROJECT_ID: ${{ secrets.PRODUCTION_PROJECT_ID }}
          STAGING_PROJECT_ID: ${{ secrets.STAGING_PROJECT_ID }}
          SUPABASE_PROJECT_ID_FALLBACK: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          set -e
          CHOSEN=""
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            BASE_REF=$(jq -r '.pull_request.base.ref' "$GITHUB_EVENT_PATH")
            if [ "$BASE_REF" = "main" ]; then
              CHOSEN="${PRODUCTION_PROJECT_ID}"
            else
              CHOSEN="${STAGING_PROJECT_ID}"
            fi
          else
            if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
              CHOSEN="${PRODUCTION_PROJECT_ID}"
            else
              CHOSEN="${STAGING_PROJECT_ID}"
            fi
          fi
          if [ -z "$CHOSEN" ]; then
            CHOSEN="${SUPABASE_PROJECT_ID_FALLBACK}"
          fi
          echo "SUPABASE_PROJECT_ID=${CHOSEN}" >> $GITHUB_ENV

      - name: Validate project id
        run: |
          if [ -z "${SUPABASE_PROJECT_ID}" ]; then
            echo "ERROR: SUPABASE_PROJECT_ID is empty. Check repository secrets PRODUCTION_PROJECT_ID / STAGING_PROJECT_ID or SUPABASE_PROJECT_ID."
            exit 1
          fi
          echo "Using Supabase project id (masked): ${SUPABASE_PROJECT_ID:0:6}***"

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push --dry-run

  # Adapted from: https://github.com/marketplace/actions/hashicorp-setup-terraform
  plan:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      TF_VAR_linked_project: ${{ secrets.SUPABASE_PROJECT_ID }}
      tf_actions_working_dir: supabase/remotes
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    permissions:
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Install jq (for PR base_ref parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Choose Supabase project id
        env:
          PRODUCTION_PROJECT_ID: ${{ secrets.PRODUCTION_PROJECT_ID }}
          STAGING_PROJECT_ID: ${{ secrets.STAGING_PROJECT_ID }}
          SUPABASE_PROJECT_ID_FALLBACK: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          set -e
          CHOSEN=""
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            BASE_REF=$(jq -r '.pull_request.base.ref' "$GITHUB_EVENT_PATH")
            if [ "$BASE_REF" = "main" ]; then
              CHOSEN="${PRODUCTION_PROJECT_ID}"
            else
              CHOSEN="${STAGING_PROJECT_ID}"
            fi
          else
            if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
              CHOSEN="${PRODUCTION_PROJECT_ID}"
            else
              CHOSEN="${STAGING_PROJECT_ID}"
            fi
          fi
          if [ -z "$CHOSEN" ]; then
            CHOSEN="${SUPABASE_PROJECT_ID_FALLBACK}"
          fi
          echo "TF_VAR_linked_project=${CHOSEN}" >> $GITHUB_ENV

      - name: Validate project id
        run: |
          if [ -z "${TF_VAR_linked_project}" ]; then
            echo "ERROR: TF_VAR_linked_project is empty. Check repository secrets PRODUCTION_PROJECT_ID / STAGING_PROJECT_ID or SUPABASE_PROJECT_ID."
            exit 1
          fi
          echo "Using Supabase project id (masked): ${TF_VAR_linked_project:0:6}***"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && !cancelled()
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
